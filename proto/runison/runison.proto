syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "RouteGuideProto";

package runison;

enum ChangeType {
  CLIENTADD = 0;
  CLIENTMODIFY = 1;
  CLIENTDELETE = 2;
  SERVERADD = 3;
  SERVERMODIFY = 4;
  SERVERDELETE = 5;
}
// Interface exported by the server.
service Synchronizer {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.

  rpc GetChangeSet(Entries) returns (ChangeSetResponse) {}
}
message Node {
  // Node is a directory
  bool dir = 1;
  // Node is a file
  bool file = 2;
  // Node is a symlink
  bool symlink = 3;
  // File name
  string name = 4;
  // File path
  string path = 5;
  // File relative path
  string relative_path = 6;
  // File length
  uint64 len = 7;
  // Modified time seconds since Unix Epoch
  uint64 mod_seconds = 8;
  // Modified time nanoseconds since Unix Epoch
  uint32 mod_nano = 9;
  // Inode in filesystem
  uint64 inode = 10;
  // Base path of synchronization 
  string root_path = 11;
}

message Entries {
  // State of client
  map<string, Node> nodes = 1;
}
message ChangeSetResponse {
  repeated Change change = 1;
}
message Change {
  // Type of Change
  ChangeType change_type = 1;
  // Node that changed
  Node node = 2;
}
// Interface exported by the server.
service RouteGuide {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc GetFeature(Point) returns (Feature) {}

  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}



// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle {
  // One corner of the rectangle.
  Point lo = 1;

  // The other corner of the rectangle.
  Point hi = 2;
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  // The name of the feature.
  string name = 1;

  // The point where the feature is detected.
  Point location = 2;
}

// A RouteNote is a message sent while at a given point.
message RouteNote {
  // The location from which the message is sent.
  Point location = 1;

  // The message to be sent.
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal in seconds.
  int32 elapsed_time = 4;
}
